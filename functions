                       ### below are the functions used to process user input data, do calculations etc ###
                       
                       
from math import sqrt
        
def distance_ab(user_location, dest_location):

  dis = int(sqrt((user_location[0]-dest_location[0])**2 \
  + (user_location[1]-dest_location[1])**2))
  return dis


def transport(user_location, dest_location,foodlist_canteens):
    R = 9999
    for x in red_loop.keys():
        first = red_loop[x][0] * 0.625
        second = red_loop[x][1] * 0.6
        last = [first,second]
        r = distance_ab(user_location, last)
        if r < R:
            R = r
            bus_stop_red = x
    
    B = 9999
    for y in blue_loop.keys():
        first = blue_loop[y][0] * 0.625
        second = blue_loop[y][1] * 0.6
        last = [first,second]
        b = distance_ab(user_location, last)
        if b < B:
            B = b
            bus_stop_blue = y
           
    tagged_stops = canteen_bus_stops[dest_location]
    
    #getting no. of stops for red route
    i_red_stop = red_list.index(bus_stop_red)
    f_red_stop = red_list.index(tagged_stops[0])
    red_stops = f_red_stop - i_red_stop
    if red_stops < 0:
        red_stops = red_stops + len(red_list)
        
    #getting no. of stops for blue route
    i_blue_stop = blue_list.index(bus_stop_blue)
    f_blue_stop = blue_list.index(tagged_stops[1])
    blue_stops = f_blue_stop - i_blue_stop
    if blue_stops < 0:
        blue_stops = blue_stops + len(blue_list) 
        
    #2nd argument should be canteen_list[dest_location], call coordinates of canteen from dictionary
    x = (foodlist_canteens[dest_location][2][0])*0.625
    y = (foodlist_canteens[dest_location][2][0])*0.6
    coordinate = [x,y]
    canteen_dist = distance_ab(user_location,coordinate) 
    if canteen_dist < 100:
        return "Walking is faster"
    else:
        pass
    
    a = "Board Red bus at stop {} and alight at stop {} \n {} stop(s)\
    \n Board Blue bus at stop {} and alight at stop {}\n {} stop(s)"\
    .format(bus_stop_red, tagged_stops[0], red_stops, bus_stop_blue, tagged_stops[1],blue_stops)
    return a
    
    

#red bus stops and list
red_loop = {
"Lee Wee Nam Library": (629,377),
"School of Biological Sciences": (336,486),
"WKW School of Communications": (214,636),
"Hall 7":(244,870),
"Innovation Centre": (490,860),
"Hall 4": (718,904),
"Hall 1": (924,916),
"Canteen 2": (973,619),
"Hall 8 and 9": (1136,485),
"Hall 11": (1388,391),
"Graduate Hall 1 and Hall 11": (1437,276),
"Hall 23": (1281,227),
"Hall 12 and 13": (865,183)
}

#lists of red and blue 
red_list = [
  "Lee Wee Nam Library",
  "School of Biological Sciences",
  "WKW School of Communications",
  "Hall 7",
  "Innovation Centre",
  "Hall 4",
  "Hall 1",
  "Canteen 2",
  "Hall 8 and 9",
  "Hall 11",
  "Graduate Hall 1 and Hall 11",
  "Hall 23",
  "Hall 12 and 13"]

#blue bus stop and list
blue_loop = {
  "NIE": (629,378),
  "Opp Hall 3 and 16": (779,250),
  "Opp Hall 14 and 15": (1029,172),
  "Opp Hall 23": (1281,213),
  "Opp Hall 10 and 11": (1396,402),
  "Opp Hall 8 and 9": (1160,478),
  "Hall 6": (994,720),
  "Opp Hall 4 and 5": (752,956),
  "Opp Innovation Centre": (496,864),
  "SPMS": (316,738),
  "Opp WKW School of Communications": (203,630),
  "Opp CEE": (410,365)
  }

blue_list = [
  "NIE",
  "Opp Hall 3 and 16",
  "Opp Hall 14 and 15",
  "Opp Hall 23",
  "Opp Hall 10 and 11",
  "Opp Hall 8 and 9",
  "Hall 6",
  "Opp Hall 4 and 5",
  "Opp Innovation Centre",
  "SPMS",
  "Opp WKW School of Communications",
  "Opp CEE"
  ]

canteen_bus_stops = {
  "Ananda Kitchen": ["Hall 11","Opp Hall 10 and 11"],
  "Bakery Cuisine": ["Lee Wee Nam Library","NIE"],
  "Each-A-Cup": ["Lee Wee Nam Library","NIE"],
  "Food Court 1": ["Hall 1", "Hall 6"],
  "Food Court 2": ["Canteen 2", "Hall 6" ],
  "Food Court 9": ["Hall 8 and 9", "Opp Hall 8 and 9"],
  "Food Court 11": ["Hall 11", "Opp Hall 10 and 11"],
  "Food Court 13": ["Hall 1", "Opp Hall 3 and 16"],
  "Food Court 14": ["Hall 12 and 13","Opp Hall 14 and 15"],
  "Food Court 16": ["Hall 12 and 13","Opp Hall 3 and 16"],
  "Foodgle Food Court": ["Nanyang Crescent Hall","NIE"],
  "KFC": ["Lee Wee Nam Library","NIE"],
  "Koufu": ["Innovation Centre","Opp Innovation Centre"],
  "Long John Silver's": ["Lee Wee Nam Library","NIE"],
  "McDonald's": ["Lee Wee Nam Library","NIE"],
  "Mr Bean": ["Lee Wee Nam Library","NIE"],
  "North Hill Food Court": ["Hall 11","Opp Hall 10 and 11"],
  "North Spine Food Court": ["Lee Wee Nam Library","NIE"],
  "Paik's Bibim": ["Lee Wee Nam Library","NIE"],
  "Peach Garden Chinese Restaurant": ["Lee Wee Nam Library","NIE"],
  "Pizza Hut Express": ["Lee Wee Nam Library","NIE"],
  "Pioneer Food Court": ["Hall 1","Opp Hall 4 and 5"],
  "Subway": ["Lee Wee Nam Library","NIE"],
  "Starbucks Coffee": ["Lee Wee Nam Library","NIE"],
  "The Sandwich Guys": ["Lee Wee Nam Library","NIE"],
  "The Soup Spoon Union": ["Lee Wee Nam Library","NIE"]
  }
list_of_canteens =[ keys for keys in canteen_bus_stops.keys()]
list_of_canteens = ['Ananda Kitchen', 'Bakery Cuisine', 'Each-A-Cup',
                    'Food Court 1', 'Food Court 2', 'Food Court 9',
                    'Food Court 11', 'Food Court 13', 'Food Court 14',
                    'Food Court 16', 'Foodgle Food oCurt', 'KFC', 'Koufu',
                    "Long John Silver's", "McDonald's", 'Mr Bean',
                    'North Hill Food Court', 'North Spine Food Court',
                    "Paik's Bibim", 'Peach Garden Cuisine',
                    'Pizza Hut Express', 'Pioneer Food Court',
                    'Subway', 'Starbucks Coffee', 'The Sandwich Guys',
                    'The Soup Spoon Union']


#functions

def sort_distance(userlocation,foodlist_canteens):
    dist_dict= {}
    for key, value in foodlist_canteens.items():
        canteen = key
        dest_location = (0.625*value[2][0],0.6*value[2][1])
        canteen_dist = distance_ab(userlocation,dest_location)
        dist_dict[canteen] = canteen_dist
    sorted_by_dist = sorted(dist_dict.items(), key= lambda x: x[1])
    list_dist_canteens = [x[0] for x in sorted_by_dist]
    print(list_dist_canteens)
    return list_dist_canteens

def sort_by_rank(userlocation,canteen_list,foodlist_canteens): 
    can_list = canteen_list
    dist_list = sort_distance(userlocation,foodlist_canteens)
    sorted_list = []
    for x in dist_list:
        if x in canteen_list:
            sorted_list.append(x)     
    print(sorted_list)
    return sorted_list[0:3]

#one function for each top3 list length
        
def depend_on_length(top3,foodlist_canteens,foodname):
    if len(top3)==1:
        key = top3[0]
        timeStart = foodlist_canteens[key][1][0]
        timeEnd = foodlist_canteens[key][1][1]
        print(timeStart,timeEnd)
        ifopen = checkopen(timeStart,timeEnd)
        print(ifopen)
        color = opencolor(ifopen)
        print(color)
        final_dest = sel_final_1(color,top3,foodname,foodlist_canteens)
        return final_dest
    elif len(top3)==2:
        key1 = top3[0]
        timeStart1 = foodlist_canteens[key1][1][0]
        timeEnd1 = foodlist_canteens[key1][1][1]
        ifopen1 = checkopen(timeStart1,timeEnd1)
        color1 = opencolor(ifopen1)
        key2 = top3[1]
        timeStart2 = foodlist_canteens[key2][1][0]
        timeEnd2 = foodlist_canteens[key2][1][1]
        ifopen2 = checkopen(timeStart2,timeEnd2)
        color2 = opencolor(ifopen2)
        final_dest = sel_final_2(color1,color2,top3,foodname,foodlist_canteens)
        return final_dest
    else:
        key1 = top3[0]
        timeStart1 = foodlist_canteens[key1][1][0]
        timeEnd1 = foodlist_canteens[key1][1][1]
        ifopen1 = checkopen(timeStart1,timeEnd1)
        color1 = opencolor(ifopen1)
        key2 = top3[1]
        timeStart2 = foodlist_canteens[key2][1][0]
        timeEnd2 = foodlist_canteens[key2][1][1]
        ifopen2 = checkopen(timeStart2,timeEnd2)
        color2 = opencolor(ifopen2)
        key3 = top3[2]
        timeStart3 = foodlist_canteens[key3][1][0]
        timeEnd3 = foodlist_canteens[key3][1][1]
        ifopen3 = checkopen(timeStart3,timeEnd3)
        color3 = opencolor(ifopen3)
        final_dest = sel_final_dest(color1,color2,color3,top3,foodname,foodlist_canteens)
        return final_dest
    return 0

def sel_final_dest(color1,color2,color3,top3,foodname,foodlist_canteens):
    loop = True
    while loop:
        appDisplay.fill(white)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif button_click(0,0,333,600):
                return top3[0]
            elif button_click(333,0,333,600):
                return top3[1]
            elif button_click(666,0,333,600):
                return top3[2]
                
        pygame.display.set_caption('Choice of canteen')
        #display 3 choices - means 3 buttons
        trans_button_special(color1,top3[0],0,0,333,600,white,lightgreen)
        trans_button_special(color2,top3[1],333,0,333,600,white,lightgreen)
        trans_button_special(color3,top3[2],666,0,333,600,white,lightgreen)
        recmd(top3,foodname,foodlist_canteens)

        pygame.display.update()

def sel_final_1(color,top3,foodname,foodlist_canteens):
    loop = True
    while loop:
        appDisplay.fill(white)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif button_click(0,0,333,600):
                return top3[0]
                
        pygame.display.set_caption('Choice of canteen')
        #display 3 choices - means 3 buttons
        trans_button_special(color,top3[0],0,0,333,600,white,lightgreen)
        trans_button('',333,0,333,600,white,lightgreen)
        trans_button('',666,0,333,600,white,lightgreen)
        recmd(top3,foodname,foodlist_canteens)
        pygame.display.update()


def sel_final_2(color1,color2,top3,foodname,foodlist_canteens):
    loop = True
    while loop:
        appDisplay.fill(white)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif button_click(0,0,333,600):
                return top3[0]
            elif button_click(333,0,333,600):
                return top3[1]
                
        pygame.display.set_caption('Choice of canteen')
        #display 3 choices - means 3 buttons
        trans_button_special(color1,top3[0],0,0,333,600,white,lightgreen)
        trans_button_special(color2,top3[1],333,0,333,600,white,lightgreen)
        trans_button('',666,0,333,600,white,lightgreen)
        recmd(top3,foodname,foodlist_canteens)
        pygame.display.update()
    
        
        #display 3 choices - means 3 buttons
   
def button_click(x,y,width,height):
    mouse_position = pygame.mouse.get_pos() #get x y coordinate of mouse
    mouse_click = pygame.mouse.get_pressed() #register press down mouse
    if x+width > mouse_position[0] > x and y+height > mouse_position[1] > y:
        if mouse_click[0] == 1:
            print(mouse_click)
            return True
    
def transport_page(userlocation,final_dest,foodlist_canteens):
    loop = True
    while loop:
        appDisplay.fill(white)
        pygame.display.set_caption('Getting there')
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            elif button_click(0,500,200,100):
                return 0 #go back
            elif button_click(800,500,200,100):
                return 1 #restart

        route = transport(userlocation,final_dest,foodlist_canteens)
        if 'Walking' in route:
            text_to_button(route,black,0,0,
                       1000,600,'small')
        else:
            split_route = route.splitlines()
            text_to_button(split_route[0],black,333,250,
                           333,50,'small')
            text_to_button(split_route[1],black,333,290,
                           333,50,'small')
            text_to_button(split_route[2],black,333,330,
                           333,50,'small')
            text_to_button(split_route[3],black,333,370,
                           333,50,'small')
        trans_button('Go Back',0,500,200,100,white,lightgreen)
        trans_button('Restart',800,500,200,100,white,lightgreen)

               
        pygame.display.update()

    


def re_run(userlocation,foodlist_canteens):
    loop = True
    while loop:
        appDisplay.fill(white)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        #if upate or recommend or quit
        canteen_list,foodname = foodpriceselect(foodlist_canteens)

        #Hector part
        top3 = sort_by_rank(userlocation,canteen_list,foodlist_canteens)
        print(top3)  #2nd output

        final_dest = depend_on_length(top3,foodlist_canteens,foodname) 
        time.sleep(1)
        return_val = transport_page(userlocation,final_dest,foodlist_canteens)
        
        if return_val == 0:
            back_loop = True 
            while back_loop:
                final_dest = depend_on_length(top3,foodlist_canteens,foodname)
                print(final_dest) #3rd output
                time.sleep(1)
                return_val = transport_page(userlocation,final_dest,foodlist_canteens)
                if return_val == 1:
                    back_loop = False
        loop = False
    
            
def checkopen(timeStart,timeEnd): #check if the store is open
    x = str(datetime.now())
    hour = int(x[11:13])

    if hour<12:
        if hour != 0:
            str_hour = str(hour)
        else:
            str_hour = str(12)
        z = 'AM'
    elif hour>12:
        hour -= 12
        str_hour = str(hour)
        z = 'PM'

    y = str_hour +':'+ x[14:16] + z #current time
    timeNow = y
    timeEnd = datetime.strptime(timeEnd, "%I:%M%p")
    timeStart = datetime.strptime(timeStart, "%I:%M%p")
    timeNow = datetime.strptime(timeNow, "%I:%M%p")

    def check_if_open(timeStart, timeEnd, timeNow):
        if timeStart < timeEnd:
            return timeNow >= timeStart and timeNow <= timeEnd
        else: #Over midnight
            return timeNow >= timeStart or timeNow <= timeEnd
    return check_if_open(timeStart, timeEnd, timeNow)

def opencolor(checkopen): #if open = blue, else red
    if checkopen == True:
        return blue
    elif checkopen == False:
        return red

def home():
    home = True
    foodlist_canteens = {'Food Court 1':[{'chinese':[0,2],'mala':[0,2],'japanese':[0,1],'mixed rice':[0,1,':)']},['07:00AM','09:00PM'],[878, 751]],
                        'Food Court 2':[{'chinese':[0,2,':)'],'korean':[0,2],'indonesian':[1,1,':)'],'western':[0,2], 'mixed rice':[0,1], 'bakery':[0,1,':)']},['07:00AM','09:00PM'],[952, 625]],
                        'Food Court 9':[{'mala':[0,2],'chinese':[0,2],'chicken rice':[0,1,':)'],'pasta':[0,2], 'mixed rice':[1,1]},['07:00AM','09:00PM'],[1184, 409]],
                        'Food Court 11':[{'chicken rice':[1,1,':)'],'mixed rice':[0,1], 'vietnamese':[0,2],'japanese':[1,2,':)']},['07:00AM','09:00PM'],[1384, 329]],
                        'Food Court 13':[{'western':[1,2,':)'],'chinese':[0,2],'mixed rice':[0,1],'japanese':[0,2,':)']},['07:00AM','09:00pm'],[883, 208]],
                        'Food Court 14':[{'muslim':[1,1],'indian':[1,1,':)'],'bakery':[0,1],'korean':[0,2]},['07:00AM','09:00PM'],[1022, 217]],
                        'Food Court 16':[{'mala':[0,2],'japanese':[0,2],'indian':[1,1],'mixed rice':[0,1], 'chinese':[0,1]},['07:00AM','09:00PM'],[805, 290]],
                        'Ananda Kitchen':[{'indian':[1,1], 'muslim':[1,1]},['12:00PM','10:30PM'],[1419, 461]], 
                        'Foodgle Food Court':[{'mala':[0,2,':)'],'korean':[0,2,':)'],'western':[0,2],'mixed rice':[0,1],'chinese':[0,1]},['07:00AM','09:00PM'],[1282, 245]],
                        'North Hill Food Court':[{'western':[1,2],'mixed rice':[0,1],'chinese':[0,2],'mala':[0,2]},['07:00AM','09:00PM'],[1437, 445]],
                        'Pioneer Food Court':[{'japanese':[0,1],'yong tau foo':[0,1,':)'], 'thai':[0,2,':)'], 'mixed rice':[0,1]},['07:00AM','09:00PM'],[995, 903]],
                        'Bakery Cuisine':[{'bakery':[0,1]},['07:00AM','09:00PM'],[605, 455]],
                        'Each-A-Cup':[{'drinks':[1,1,':)']},['09:00AM','09:00PM'],[605, 455]],
                        'KFC':[{'western':[1,2,':)']},['07:30AM','10:00PM'],[605, 455]],
                        "Long John Silver's":[{'western':[0,2],'burgers':[0,2]},['07:30AM','10:00PM'],[605, 455]],
                        "McDonald's":[{'western':[1,2],'burgers':[1,2,':)']},['07:00AM','12:00AM'],[605, 455]],
                        'Mr Bean':[{'bakery':[0,1],'drinks':[0,1]},['07:30AM','08:30PM'],[605, 455]],
                        'North Spine Food Court':[{'western':[1,2],'mala':[0,2],'chicken rice':[0,1], 'mixed rice':[0,1], 'japanese':[0,2],'chinese':[0,1],'vietnamese':[0,1,':)']},['07:00AM','09:00PM'],[605, 455]],
                        "Paik's Bibim":[{'korean':[0,3,':)']},['10:00AM','09:00PM'],[605, 455]],
                        'Peach Garden Chinese Restaurant':[{'chinese':[0,4,':)']},['11:00AM','10:00PM'],[605, 455]],
                        'The Soup Spoon Union':[{'western':[0,2,':)']},['11:00AM','09:00PM'],[605, 455]],
                        'Koufu':[{'pasta':[0,2,':)'],'mixed rice':[0,1],'yong tau foo':[1,1],'drinks':[1,1],'japanese':[0,1],'indian':[1,1]},['07:00AM','01:00PM'],[446, 745]],
                        'The Sandwich Guys':[{'sandwich':[0,2,':)']},['10:00AM','07:00PM'],[605, 455]],
                        'Subway':[{'sandwich':[1,2]},['08:00AM','10:00PM'],[605, 455]],
                        'Pizza Hut Express':[{'pizza':[1,2,':)']},['11:00AM','10:00PM'],[605, 455]],
                        'Starbucks Coffee':[{'bakery':[1,2,':)'],'drinks':[1,2,':)']},['07:00AM','10:00PM'],[605, 455]]}

    app_intro()
    time.sleep(2)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            
            appDisplay.fill(white)
            message_to_screen("Welcome to NTUEats", black, -80,'large')
            recommend = button("recommend",100,300,200,100,green,lightgreen)
            update = button("update",425,300,200,100,green,lightgreen)
            quitapp = button("quit",750,300,200,100,green,lightgreen)
            
            pygame.display.update()
            
            if recommend == 1:
                print("recommend food")
                userlocation= showmap()
                re_run(userlocation,foodlist_canteens)
            
            elif update == 1:
                print("update food")
                foodlist_canteens = full_enterinfo(foodlist_canteens)
                print(foodlist_canteens)
                time.sleep(2)
            
            elif quitapp == 1:
                print("leave")
                pygame.quit()
                quit()
            
                        
                        
    pygame.display.update()

def showmap():
    X = 0
    loop = True
    while loop:
    
        W = display_width

        H = display_height
        font = pygame.font.SysFont("monospace", 20)
        text1 = font.render("where are you!", True, (0, 0, 0))
        screen = pygame.display.set_mode((W, H))
        screenIm = pygame.image.load("NTUMap.png")
        screenIm = pygame.transform.scale(screenIm, (W , H))
        screen.blit(screenIm,(0, 0))

        screen.blit(text1 , (100,200))

        pygame.display.update()

        X,Y = mouseclick()
        if X != 0:
            loop = False
    return(X,Y)

def recmd(top3,foodname,foodlist_canteens):
    if len(top3) == 1:
        x = check_len(top3[0],foodname,foodlist_canteens)
        if x == True:
            text_to_button('*Recommended',black,0,200,333,400,'small')

    elif len(top3) == 2:
        x = check_len(top3[0],foodname,foodlist_canteens)
        if x == True:
            text_to_button('*Recommended',black,0,200,333,400,'small')
        y = check_len(top3[1],foodname,foodlist_canteens)
        if y == True:
            text_to_button('*Recommended',black,333,200,333,400,'small')
                        
    elif len(top3) == 3:
        x = check_len(top3[0],foodname,foodlist_canteens)
        if x == True:
            text_to_button('*Recommended',black,0,200,333,400,'small')
        y = check_len(top3[1],foodname,foodlist_canteens)
        if y == True:
            text_to_button('*Recommended',black,333,200,333,400,'small')
        z = check_len(top3[2],foodname,foodlist_canteens)
        if z == True:
            text_to_button('*Recommended',black,666,200,333,400,'small')


    
def check_len(canteen,foodname,foodlist_canteens):
    long_list = foodlist_canteens[canteen] #retrieve list of key value pairs
    short_list = long_list[0]
    foodname_value = short_list[foodname]
    if len(foodname_value) ==3:
        return True
    else:
        return False
#################################################################################



home()

pygame.display.update()
pygame.quit()
quit()
